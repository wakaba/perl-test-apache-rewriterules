=head1 NAME

Test::Apache::RewriteRules - Testing Apache's Rewrite Rules

=head1 SYNOPSIS

  use Test::Apache::RewriteRules;
  use Path::Class;
  
  $Test::Apache::RewriteRules::HttpdPath = '/path/to/httpd';
  my $apache = Test::Apache::RewriteRules->new;
  $apache->add_backend(name => 'ReverseProxyedHost1');
  $apache->add_backend(name => 'ReverseProxyedHost2');
  $apache->rewrite_conf_f(file('apache.rewrite.conf'));
  
  $apache->start_apache;
  
  $apache->is_host_path(q</foo/a>, 'ReverseProxyedHost1', q</a>,
                        'Handled by reverse-proxyed host 1');
  $apache->is_host_path(q</bar/b>, 'ReverseProxyedHost2', q</b>,
                        'Handled by reverse-proxyed host 2');
  $apache->is_host_path(q</baz>, '', q</baz>,
                        'Handled by the proxy itself');
  $apache->is_redirect(q</hoge/z>, q<http://external.test/z>);
  $apache->is_status_code(q</secret>, 403);
  
  $apache->stop_apache;

  # apache.rewrite.conf
  RewriteEngine on
  RewriteRule /foo/(.*)  http://%{ENV:ReverseProxyedHost1}/$1 [P,L]
  RewriteRule /bar/(.*)  http://%{ENV:ReverseProxyedHost2}/$1 [P,L]
  RewriteRule /hoge/(.*) http://external.test/$1 [R,L]

=head1 DESCRIPTION

The C<Test::Apache::RewriteRules> module sets up Apache HTTPD server
for the purpose of testing of a set of C<RewriteRule>s in
C<apache.conf> Apache configuration.

=head1 METHODS

=over 4

=item $apache = Test::Apache::RewriteRules->available;

Returns whether the features provided by this module is available or
not.  At the time of writing, it returns false if no Apache C<httpd>
executable is found.

=item $apache = Test::Apache::RewriteRules->new;

Returns a new instance of the class.

=item $apache->add_backend(name => HOST_NAME);

Registers a backend (i.e. a host that handles HTTP requests).  An
environment variable whose name is I<HOST_NAME> will be defined in the
automatically-generated Apache configuration file such that it can be
used in rewrite rules.

=item $apache->copy_conf_as_f(ORIG_FILE, [PATTERN1 => REPLACE1, PATTERN2 => REPLACE2, ...], OPTIONS...)

Copies the file represented by the C<Path::Class::File> object given
as the first argument into the temporary directory and then,
optionally replaces its content by applying patterns given as the
second argument.

Patterns, if specified, must be an array reference containing string
or regular expression followed by string or code reference.  If the
replaced string is specified as a code reference, its return value is
used for the replacement.  If the pattern is specified as a regular
expression and the replaced string is specified as a code reference,
the code reference can use C<$1>, C<$2>, ... to access to captured
substrings.

The remaining arguments are interpreted as key-value pairs.  If a
C<rewrite_include> option is specified, files referenced from the
specified file using the C<Include> directives are recursively copied
into the temporary directory.  The value must be a code reference.
The code is invoked with an argument, the path (string) specified in
the C<Include> directive, and is expected to return the path (string)
representing the referenced file in your testing environment.  It
would be useful if paths specified in configuration files assumes
different file system layout from your testing environment.

Contents of the referenced files are also replaced using the patterns
when the C<inherit_patterns> option is also specified.

The method returns the C<Path::Class::File> object representing the
copied file.

=item $apache->rewrite_conf_f(PATH_CLASS_FILE)

Sets the C<Path::Class::File> object that represents the path to the
C<RewriteRule>s' part of the Apache configuration to test.

=item $apache->start_apache

Boots the Apache process.  It should be invoked before any
C<is_host_path> call.

=item $apache->is_host_path(REQUEST_PATH, EXPECTED_HOST_NAME, EXPECTED_PATH, [NAME])

Checks whether the request for I<REQUEST_PATH> is handled by host
C<EXPECTED_HOST_NAME> with path C<EXPECTED_PATH>.  The host name
should be specified by the name registered using C<add_backend>
method, or the empty string if the request would be handled by the
reverse proxy (i.e. the rewriting host) itself.  This method acts as a
test function of L<Test::Builder> or L<Test::More>.  The argument
I<NAME>, if specified, represents the name of the test.

=item $apache->is_redirect(REQUEST_PATH, EXPECTED_REDIRECT_URL, [NAME], [code => CODE])

Checks whether the request for I<REQUEST_PATH> is HTTP-redirected to
the I<EXPECTED_REDIRECT_URL>.  This method acts as a test function of
L<Test::Builder> or L<Test::More>.  The argument I<NAME>, if
specified, represents the name of the test.

Optionally, you can specify the expected HTTP status code.  The
default status code is C<302> (Found).

=item $apache->is_status_code(REQUEST_PATH, EXPECTED_STATUS_CODE, [NAME])

Checks whether the response returned for a request for I<REQUEST_PATH>
has status code of I<EXPECTED_REQUEST_CODE>.  The argument I<NAME>, if
specified, represents the name of the test.

=item $apache->stop_apache

Shuts down the Apache process.

=back

You can set the expected client environment used to evaluate
C<is_host_path>, C<is_redirect>, and C<is_status_code> by code blocks
provided by L<Test::Apache::RewriteRules::ClientEnvs> module.

Where I<REQUEST_PATH> is expected, the host for the request (as used
in the HTTP C<Host:> request header field) can be specified by
prepending C<//> followed by host (hostname optionally followed by
C<:> and port number) before the real path.

=head1 ENVIRONMENT VARIABLES

If the environment variable L<TEST_APACHE_HTTPD> is set, the value is
used as the path to the Apache's C<httpd> executable.  If the variable
is not specified, but the Perl global variable
C<$Test::Apache::RewriteRules::HttpdPath> is set to a non-default
value, the value is used as the path to the C<httpd>.  Otherwise, the
C<httpd> file is searched from commonly-installed paths.  If the
specified path is invalid, or no C<httpd> is found at all, the module
bails out.

If the environment variable C<TEST_APACHE_DEBUG> is set to a true
value, or the Perl global variable
C<$Test::Apache::RewriteRules::DEBUG> is set to a true value, then the
debug mode is enabled.  In debug mode, some additional debug messages
are printed.  Moreover, temporary directories containing
auto-generated configuration files and log files are not deleted upon
the termination of the Perl process.

=head1 EXAMPLES

See C<t/test/apache-rewriterules*.t> and
C<t/test/apache-rewriterules*.conf>.

=head1 DEPENDENCY

Apparently, the module depends on Apache HTTP Server.  It requires
Apache 2.2 with appropriate modules installed.

The module also requires Perl 5.8 or later, as well as modules:
L<Exporter::Lite>, L<Path::Class>, L<Test::Differences>,
L<LWP::UserAgent>, and L<HTTP::Request>.

=head1 DEVELOPMENT

Latest version of the module is available in the GitHub repository
<https://github.com/wakaba/perl-test-apache-rewriterules>.

=head1 HISTORY

=over 4

=item 1.0

Initial released version.

=item 1.1

Added C<is_status_code> method.

=item 1.2

Added C<rewrite_include> option.

=back

=head1 SEE ALSO

mod_rewrite <http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html>.

L<Test::More>.

L<Test::Apache::RewriteRules::ClientEnvs>.

Test::Apache::RewriteRules で mod_rewrite のテストを書こう, id:onishi,
October 17, 2010, <http://d.hatena.ne.jp/onishi/20101017/1287277579>
(In Japanese).

=head1 AUTHOR

Wakaba (id:wakabatan) <wakabatan@hatena.ne.jp>.

=head1 ACKNOWLEDGEMENTS

This module was originally developed as part of Ugomemo Hatena
project, then improved at Hatena Application Platform Development
Team.

Thanks to Kentaro Kuribayashi (id:antipop) and id:shiba_yu36 for their
contributions.

The repository contains a copy of L<Net::TCP::FindPort> module, whose
latest version is available from
<https://github.com/wakaba/perl-net-tcp-findport>.

=head1 LICENSE

Copyright 2010-2011 Hatena <http://www.hatena.ne.jp/>.

Copyright 2012 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
